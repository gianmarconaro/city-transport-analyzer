# -*- coding: utf-8 -*-
"""
/***************************************************************************
 route_tracking
                                 A QGIS plugin
City Transport Analyzer Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gianmarco Naro
        email                : gianmarco.naro@mail.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QTimer
from qgis.PyQt.QtGui import QIcon

from qgis.PyQt.QtWidgets import QAction

from qgis.core import QgsProject

from .resources import *
from .route_tracking_dialog import route_trackingDialog
import os.path

from .stops_layer import StopsLayer
from .pedestrian_graph import PedestrianGraph
from .route_graph import RouteGraph
from .analysis import Analysis
from .data_manager import remove_cached_graphs

import osmnx as ox
import datetime


class RouteTracking(StopsLayer, PedestrianGraph, RouteGraph, Analysis):
    """QGIS Plugin Implementation."""

    # set the right path for cache folder
    ox.config(use_cache=True, cache_folder="../../../cache")

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "route_tracking_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&City Transport Analyzer")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Save the path to the plugin folder
        self._path = os.path.dirname(os.path.abspath(__file__))

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("route_tracking", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/route_tracking/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("City Transport Analyzer"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&City Transport Analyzer"), action)
            self.iface.removeToolBarIcon(action)
        

    def run(self):
        """Run method that performs all the real work"""

        # Function to call when a layer is about to be removed
        def layer_removed(layer_ids):
            # if the layer removed is the one called "pedestrian_graph"
            # we remove the associated files that we created    
            for layer_id in layer_ids:
                layer = QgsProject.instance().mapLayer(layer_id)

                if layer is not None and layer.name() in ["pedestrian_graph"]:
                    def remove_data():
                        remove_cached_graphs(f"{layer.name()}.gpkg", f"{layer.name()}.graphml.xml")

                    QTimer.singleShot(10000, remove_data)

                    

        # Connect the 'layersRemoved' signal
        QgsProject.instance().layersRemoved.connect(layer_removed)

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = route_trackingDialog(route_tracking=self)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        self.dlg.exec_()
        result = self.dlg.get_result()

        if result:
            self.dlg.set_result(False)
            start_time = datetime.datetime.now()

            # get selection of polygons combobox in dialog
            selected_polygon_layer = self.dlg.polygonsBox.currentText()

            self.create_stops_layer()
            self.create_pedestrian_layer(selected_polygon_layer)
            self.create_graph_for_routes()
            end_time = datetime.datetime.now()
            print("Total time preparing data: ", end_time - start_time)

            start_time = datetime.datetime.now()
            self.start_analysis()
            end_time = datetime.datetime.now()
            print("Total time analysis: ", end_time - start_time)

        # See if OK was pressed
        print("Process terminated")
