# -*- coding: utf-8 -*-
"""
/***************************************************************************
 route_tracking
                                 A QGIS plugin
 Thesis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gianmarco Naro
        email                : gianmarco.naro@mail.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon, QCursor, QColor
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsRectangle, QgsGeometry, QgsPointXY ,QgsWkbTypes, QgsFields, QgsField, QgsVectorFileWriter, QgsMarkerSymbol, QgsLineSymbol, QgsSingleSymbolRenderer, QgsFillSymbol, QgsDistanceArea, QgsUnitTypes, QgsSpatialIndex, QgsMapLayer
from qgis.gui import QgsMapToolEmitPoint, QgsMapMouseEvent
from qgis.utils import iface

from .resources import *
from .route_tracking_dialog import route_trackingDialog
import os.path

from .gtfs_db import Database
from .stops_layer import StopsLayer
from .pedestrian_graph import PedestrianGraph
from .drive_graph import DriveGraph
from .route_graph import RouteGraph
from .analysis import Analysis
from .utils import change_style_layer

from collections import defaultdict
from itertools import islice
import networkx as nx
import osmnx as ox
import pprint as pp
import geopandas as gpd
import datetime

class route_tracking(StopsLayer, PedestrianGraph, DriveGraph, RouteGraph, Analysis):
    """QGIS Plugin Implementation."""

    # set the right path for cache folder
    ox.config(use_cache=True, cache_folder='../../../cache')

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'route_tracking_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Thesis_Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Save the path to the plugin folder
        self._path = os.path.dirname(os.path.abspath(__file__))

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('route_tracking', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
    
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/route_tracking/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Thesis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Thesis_Plugin'),
                action)
            self.iface.removeToolBarIcon(action)

    def get_stops_info(self, selected_stops: list):
        """Get stops info"""

        # create database object
        database = Database()

        # create a default dictionary to store the stops info
        stops_info = defaultdict(dict)

        # iterate over the selected stops
        for stop in selected_stops:
            stop_id = stop["ID"]
            stop_name = stop["Stop_name"]

            key = (stop_id, stop_name)

            # get the stop info from the database
            stop_info = database.select_information_given_stop_id(stop_id)
            for row in stop_info:
                trip_id, arrival_time, departure_time, stop_sequence, route_id, service_id, trip_headsign, route_short_name, route_long_name, route_type = row
                stop_info_query = {
                    "trip_id": trip_id,
                    "arrival_time": arrival_time,
                    "departure_time": departure_time,
                    "stop_sequence": stop_sequence,
                    "route_id": route_id,
                    "service_id": service_id,
                    "trip_headsign": trip_headsign,
                    "route_short_name": route_short_name,
                    "route_long_name": route_long_name,
                    "route_type": route_type
                }
                stops_info[key] = stop_info_query

        # return the stops info
        return stops_info

    def calculate_n_shortest_paths(self, G: nx.MultiDiGraph, origin: tuple, destination: tuple, n: int):
        """Calculate n shortest paths between two nodes"""

        print("Calculating n shortest paths...")

        # get nearest nodes
        origin = ox.nearest_nodes(G, origin[0], origin[1])
        destination = ox.nearest_nodes(G, destination[0], destination[1])

        # calculate n shortest paths
        n_shortest_paths = list(islice(ox.k_shortest_paths(G, origin, destination, k=n, weight='weight'), n))

        # calculate n shortest paths
        # n_shortest_paths = list(islice(nx.all_shortest_paths(G, origin, destination, weight='weight'), n))

        # print the number of paths
        print("Number of paths: ", len(n_shortest_paths))

        # return n shortest paths
        return n_shortest_paths


                        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = route_trackingDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
    	
        start_time = datetime.datetime.now()
        print("Starting time: ", start_time)

        # create the layer of points for the stops
        self.create_stops_layer()

        # create the layer from pedestrian graph
        self.create_pedestrian_layer()

        # create the layer from drive graph
        self.create_drive_layer()

        # create the layer from routes graph
        self.create_graph_for_routes()   
        
        self.start_analysis()
        
        # paths = self.calculate_n_shortest_paths(G, orig, dest, 10)
        # pp.pprint(paths)

        # print current time
        end_time = datetime.datetime.now()
        print("Ending time: ", end_time)
        print("Total time: ", end_time - start_time)
        
        # See if OK was pressed
        print("SIUM")


        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
