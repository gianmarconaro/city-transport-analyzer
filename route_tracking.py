# -*- coding: utf-8 -*-
"""
/***************************************************************************
 route_tracking
                                 A QGIS plugin
 Thesis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gianmarco Naro
        email                : gianmarco.naro@mail.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication, QVariant, QTimer
from qgis.PyQt.QtGui import QIcon, QCursor, QColor
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsVectorLayer, QgsFeature, QgsGeometry, QgsPointXY, QgsWkbTypes, QgsFields, QgsField, QgsVectorFileWriter, QgsMarkerSymbol, QgsLineSymbol, QgsSingleSymbolRenderer, QgsFillSymbol, QgsDistanceArea, QgsUnitTypes
from qgis.gui import QgsMapToolEmitPoint, QgsMapMouseEvent
from qgis.utils import iface

from .resources import *
from .route_tracking_dialog import route_trackingDialog
import os.path

from .gtfs_db import Database

from collections import defaultdict
from itertools import islice
import networkx as nx
import osmnx as ox
import matplotlib.pyplot as plt
import pprint as pp
import geopandas as gpd
import momepy as mm

class route_tracking:
    """QGIS Plugin Implementation."""

    # set the right path for cache folder
    ox.config(use_cache=True, cache_folder='../../../cache')

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'route_tracking_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Thesis_Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Save the path to the plugin folder
        self._path = os.path.dirname(os.path.abspath(__file__))

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('route_tracking', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action
    
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/route_tracking/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Thesis'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Thesis_Plugin'),
                action)
            self.iface.removeToolBarIcon(action)









    def create_graph_for_routes(self):
        """Create a graph that represents the route with networkx.
        shape = [shape_id, shape_pt_lat, shape_pt_lon, shape_pt_sequence]"""

        print("Creating graph for routes...")
        
        database = Database()
        shapes = database.select_all_coordinates_shapes()

        # check if routes is empty
        if not shapes:
            return "Error: routes is empty"
        
        layer_name = "routes_graph"
        graph_path_gml = self._path + "/graphs/routes_graph.graphml"
        graph_path_gpkg = self._path + "/graphs/routes_graph.gpkg"

        shape_id = ""
        is_first_value = True

        # new networkx graph
        G = nx.MultiDiGraph()
        G.graph['crs'] = 'EPSG:4326'

        for shape in shapes:
            # check if is the first value
            if shape[0] != shape_id:
                is_first_value = True

            if is_first_value:
                shape_id = shape[0]
                is_first_value = False

                # select all transports using the shape_id
                transport = database.select_transport_by_shape_id(shape_id)
                transport = str(transport[0][0])

                # update previous shape
                prev_shape = shape

                # add first node to graph
                G.add_node(shape[0] + "_" + str(shape[3]), x=shape[2], y=shape[1], is_stop=False)

            else:
                # add node to graph
                G.add_node(shape[0] + "_" + str(shape[3]), x=shape[2], y=shape[1], is_stop=False)

                # calculate euclidean distance between previous shape and current shape
                euclidean_distance = ox.distance.euclidean_dist_vec(prev_shape[2], prev_shape[1], shape[2], shape[1])

                # add edge to graph with euclidean distance as weight
                starting_node = prev_shape[0] + "_" + str(prev_shape[3])
                ending_node = shape[0] + "_" + str(shape[3])
                G.add_edge(starting_node, ending_node, weight=euclidean_distance, transport=transport)

                # update previous shape
                prev_shape = shape

        print("Graph created!")

        G = self.modify_graph(G)

        # import and save it as a GeoPackage and as GraphML file
        print("Saving graph as GRAPHML and GeoPackage file...")

        ox.save_graphml(G, filepath=graph_path_gml)
        ox.save_graph_geopackage(G, filepath=graph_path_gpkg)

        print("Graph saved!")

        # load graph as layer
        self.load_routes_layer(graph_path_gpkg, "routes_graph")

        # change style of the layer
        project = QgsProject.instance()
        layer = project.mapLayersByName(layer_name)[0]
        self.change_style_layer(layer, 'circle', 'blue', '0.5', None)
        self.change_style_layer(layer, None, 'blue', None, '0.5')

    def load_routes_layer(self, layer_path: str, layer_name: str):
        """Load pedestrian layer"""

        print("Loading route graph...")

        project = QgsProject.instance()
        layer_point = QgsVectorLayer(layer_path + "|layername=nodes", layer_name, "ogr")
        layer_line = QgsVectorLayer(layer_path + "|layername=edges", layer_name, "ogr")
        if not layer_point.isValid() or not layer_line.isValid():
            print("Layer failed to load!")
        else:
            # Add layer to the registry
            print("Route graph loaded!")
            project.addMapLayer(layer_point)
            project.addMapLayer(layer_line)

    def modify_graph(self, G: nx.MultiDiGraph):
        """Modifies the graph `G` by merging nodes with the same coordinates and merging stops with the graph."""

        print("Modifying graph...")

        # Create a dictionary of coordinates
        coords = defaultdict(list)
        for node, data in G.nodes(data=True):
            coords[(data['x'], data['y'])].append(node)

        # Merge nodes with the same coordinates
        print("Merging nodes with same coordinates...")
        for coord, nodes in coords.items():
            if len(nodes) > 1:
                self.merge_graph_nodes_with_same_coordinates(G, nodes, coord)
        print("Nodes merged!")
        
        # Merge stops with the graph
        # print("Merging stops with the graph...")
        # self.merge_stops_with_graph(G)
        # print("Stops merged!")

        print("Graph modified!")

        return G
    
    def merge_graph_nodes_with_same_coordinates(self, G: nx.MultiDiGraph, nodes: list, coord: tuple):
        """Merge the selected `nodes` in the graph `G` into one `new_node`, considering edge directions."""

        # id of the new node is the concatenation of the ids of the merged nodes
        node_id = '-'.join(nodes)

        # add the new node to the graph
        G.add_node(node_id, x=coord[0], y=coord[1], is_stop=False)

        # add edges to the new node
        for node in nodes:
            edges_out = G.edges(node, data=True, keys=True)
            edges_in = G.in_edges(node, data=True, keys=True)

            for u, v, k, data in edges_out:
                G.add_edge(node_id, v, key=k, **data)
            
            for u, v, k, data in edges_in:
                G.add_edge(u, node_id, key=k, **data)
            G.remove_node(node) 

    def merge_stops_with_graph(self, G: nx.MultiDiGraph):
        """Merges the stops with the graph."""

        database = Database()
        stops = database.select_all_coordinates_stops()

        stops_nearest_nodes = []

        for stop in stops: 
            # get nearest node and add it to the list
            nearest_node = ox.nearest_nodes(G, stop[3], stop[2])
            stops_nearest_nodes.append(nearest_node)

        for node in G.nodes():
            if node in stops_nearest_nodes:
                G.nodes[node]['is_stop'] = True

    def create_route_shapes_layer(self):
        """Create a layer with route"""

        print("Creating route shapes layer...")

        # get all shapes from database
        database = Database()
        route_shapes = database.select_all_coordinates_shapes()

        # define point fields for feature attributes
        fields_point = QgsFields()
        fields_point.append(QgsField("ID", QVariant.String))
        fields_point.append(QgsField("Lon", QVariant.Double))
        fields_point.append(QgsField("Lat", QVariant.Double))
        fields_point.append(QgsField("Sequence", QVariant.Int))

        # define line fields for feature attributes
        fields_line = QgsFields()
        fields_line.append(QgsField("ID", QVariant.String))
        fields_line.append(QgsField("Start_Lon", QVariant.Double))
        fields_line.append(QgsField("Start_Lat", QVariant.Double))
        fields_line.append(QgsField("End_Lon", QVariant.Double))
        fields_line.append(QgsField("End_Lat", QVariant.Double))

        # define name and path
        layer_name_points = "shape_points"
        layer_name_lines = "shape_lines"

        path_points = self._path + "/shapefiles/shape_points.shp"
        path_lines = self._path + "/shapefiles/shape_lines.shp"

        crs = QgsProject.instance().crs()

        # define writer for points
        writer_point = QgsVectorFileWriter(
            path_points,
            "UTF-8",
            fields_point,
            QgsWkbTypes.Point,
            crs,
            "ESRI Shapefile"
        )

        # define writer for lines
        writer_line = QgsVectorFileWriter(
            path_lines,
            "UTF-8",
            fields_line,
            QgsWkbTypes.LineString,
            crs,
            "ESRI Shapefile"
        )

        if writer_point.hasError() != QgsVectorFileWriter.NoError:
            print("Error when creating shapefile: ",  writer_point.errorMessage())

        if writer_line.hasError() != QgsVectorFileWriter.NoError:
            print("Error when creating shapefile: ",  writer_line.errorMessage())

        shape_id = ""
        is_first_value = True
        prev_route_shape = None

        for route_shape in route_shapes:
            # create a feature
            fet_line = QgsFeature()
            fet_point = QgsFeature()

            # check if the shape is changed
            if route_shape[0] != shape_id:
                is_first_value = True

            if is_first_value:
                is_first_value = False
                shape_id = route_shape[0]
                prev_route_shape = route_shape

                # feature for first point
                point = QgsPointXY(route_shape[2], route_shape[1])
                geometry = QgsGeometry.fromPointXY(point)
                fet_point.setGeometry(geometry)
                fet_point.setAttributes([route_shape[0], route_shape[2], route_shape[1], route_shape[3]])
                writer_point.addFeature(fet_point)

            else:
                # feature for not first point
                point = QgsPointXY(route_shape[2], route_shape[1])
                geometry = QgsGeometry.fromPointXY(point)
                fet_point.setGeometry(geometry)
                fet_point.setAttributes([route_shape[0], route_shape[2], route_shape[1], route_shape[3]])
                writer_point.addFeature(fet_point)

                # feature for line
                line = QgsGeometry.fromPolylineXY([QgsPointXY(prev_route_shape[2], prev_route_shape[1]), QgsPointXY(route_shape[2], route_shape[1])])
                fet_line.setGeometry(line)
                ID = prev_route_shape[0] + "-" + str(prev_route_shape[3]) + "_" + route_shape[0] + "-" + str(route_shape[3])
                fet_line.setAttributes([ID, prev_route_shape[2], prev_route_shape[1], route_shape[2], route_shape[1]])
                writer_line.addFeature(fet_line)

                # update previous shape
                prev_route_shape = route_shape

        # delete the writer to flush features to disk
        del writer_point
        del writer_line
        
        # load layers
        self.load_route_shapes_points_layer()
        self.load_route_shapes_lines_layer()

        # retrieve the layer
        project = QgsProject.instance()
        layer_point = project.mapLayersByName(layer_name_points)[0]
        layer_line = project.mapLayersByName(layer_name_lines)[0]

        # define style layer for points
        self.change_style_layer(layer_point, 'circle', 'gray', '1.0', None)

        # define style layer for lines
        self.change_style_layer(layer_line, None, 'gray', None, '0.5')

        print("Route shapes layer created!")

    def load_route_shapes_points_layer(self):
        """Load route layer into QGIS"""

        project = QgsProject.instance()
        layer_point = QgsVectorLayer(self._path + "/shapefiles/shape_points.shp", "shape_points", "ogr")

        if not layer_point.isValid():
            print("Layer point failed to load!")
        else:
            project.addMapLayer(layer_point)

    def load_route_shapes_lines_layer(self):
        """Load route layer into QGIS"""

        project = QgsProject.instance()
        layer_line = QgsVectorLayer(self._path + "/shapefiles/shape_lines.shp", "shape_lines", "ogr")

        if not layer_line.isValid():
            print("Layer line failed to load!")
        else:
            project.addMapLayer(layer_line)

    def create_stops_layer(self):
        """Create a layer with stops"""

        print("Creating stops layer...")

        database = Database()
        stops = database.select_all_coordinates_stops()

        # define fields for feature attributes
        fields = QgsFields()
        fields.append(QgsField("ID", QVariant.String))
        fields.append(QgsField("Stop_name", QVariant.String))
        fields.append(QgsField("Lon", QVariant.Double))
        fields.append(QgsField("Lan", QVariant.Double))
        fields.append(QgsField("Wheelchair_boarding", QVariant.Int))

        # fields.append(QgsField("Arrival_time", QVariant.DateTime))
        # fields.append(QgsField("Departure_time", QVariant.DateTime))
        # fields.append(QgsField("Stop_sequence", QVariant.Int))

        # fields.append(QgsField("Trip_id", QVariant.String))
        # fields.append(QgsField("Trip_headsign", QVariant.String))

        # fields.append(QgsField("Route_short_name", QVariant.String))
        # fields.append(QgsField("Route_long_name", QVariant.String))
        # fields.append(QgsField("Route_type", QVariant.Int))

        # define name and path
        layer_name = "stops"
        layer_path = self._path + "/shapefiles/stops.shp"
        project = QgsProject.instance()
        crs = project.crs()

        # define writer
        writer = QgsVectorFileWriter(
            layer_path,
            "UTF-8",
            fields,
            QgsWkbTypes.Point,
            crs,
            "ESRI Shapefile"
        )

        if writer.hasError() != QgsVectorFileWriter.NoError:
            print("Error when creating shapefile: ",  writer.errorMessage())

        for stop in stops:
            
            # stop information
            stop_id = stop[0]
            stop_name = stop[1]
            lon = stop[3]
            lat = stop[2]
            wheelchair_boarding = stop[4]

            # add a feature with geometry
            fet = QgsFeature()
            fet.setAttributes([stop_id, stop_name, lon, lat, wheelchair_boarding])

            # create geometry
            point = QgsPointXY(stop[3], stop[2])
            geometry = QgsGeometry.fromPointXY(point)
            fet.setGeometry(geometry)

            # add the geometry to the layer
            writer.addFeature(fet)

        # takes all the stop id and then make a query to retrieve short name of the transport passing by all the stops id
        # result[0] -> stop_id
        # result[1] -> short_name
                   

        # delete the writer to flush features to disk
        del writer

        # load layer
        self.load_stops_layer(layer_path, layer_name)

        # retrieve layer
        layer = project.mapLayersByName(layer_name)[0]

        # set layer style
        self.change_style_layer(layer, 'square', 'green', '2', None)

        print("Stops layer created!")

    def load_stops_layer(self, layer_path: str, layer_name: str):
        """Load stops layer"""

        project = QgsProject.instance()
        layer = QgsVectorLayer(layer_path, layer_name, "ogr")
        if not layer.isValid():
            print("Layer failed to load!")
        else:
            # Add layer to the registry
            project.addMapLayer(layer)

    def change_style_layer(self, layer_name: str, name: str, color: str, size: str, width: str):
        """Change style of a layer"""

        # if is a point layer
        if size is not None:
            symbol = QgsMarkerSymbol.createSimple({'name': name, 'color': color, 'size': size})
        
        # if is a line layer
        elif width is not None:
            symbol = QgsLineSymbol.createSimple({'color': color, 'width': width})

        renderer = QgsSingleSymbolRenderer(symbol)
        layer_name.setRenderer(renderer)

    def create_pedestrian_layer(self):
        """Create a layer with pedestrian"""

        print("Creating pedestrian graph...")

        # import from osmnx the graph of the city with pedestrian network
        place_name = "Milano, Lombardia, Italia"
        pedestrian_graph = ox.graph_from_place(place_name, network_type="walk")

        # define name and path
        layer_name = "pedestrian_graph"
        layer_path = self._path + "/graphs/pedestrian_graph.gpkg"

        # import and save it as a layer
        ox.save_graph_geopackage(pedestrian_graph, filepath=layer_path, directed=False)

        print("Pedestrian graph created!")

        # load layer
        self.load_pedestrian_layer(layer_path, layer_name)

        # change style of the layer
        project = QgsProject.instance()
        layer = project.mapLayersByName(layer_name)[0]
        self.change_style_layer(layer, None, 'red', None, '0.5')

    def load_pedestrian_layer(self, layer_path: str, layer_name: str):
        """Load pedestrian layer"""

        print("Loading pedestrian graph...")

        project = QgsProject.instance()
        layer = QgsVectorLayer(layer_path + "|layername=edges", layer_name, "ogr")
        if not layer.isValid():
            print("Layer failed to load!")
        else:
            # Add layer to the registry
            print("Pedestrian graph loaded!")
            project.addMapLayer(layer)

    def get_nearby_stops(self, layer_name: str, x_coord: float, y_coord: float, distance: int):
        """Get nearby stops"""

        print("Getting nearby stops...")

        # obtain layer and crs
        project = QgsProject.instance()
        stops_layer = project.mapLayersByName(layer_name)[0]
        crs = stops_layer.crs()

        # create distance area
        distance_area = QgsDistanceArea()
        distance_area.setSourceCrs(stops_layer.crs(), project.transformContext())
        distance_area.setEllipsoid(project.ellipsoid())

        # convert distance from meters to degrees
        distance_degrees = distance_area.convertLengthMeasurement(distance, QgsUnitTypes.DistanceUnit.Degrees)

        # create starting point
        starting_point = QgsPointXY(x_coord, y_coord)
        geometry = QgsGeometry.fromPointXY(starting_point)

        # create a circular buffer
        circular_buffer = geometry.buffer(distance_degrees, segments=32)

        # create new feature to store the circular buffer
        circular_feature = QgsFeature()
        circular_feature.setGeometry(circular_buffer)

        # add the circular buffer to the layer
        circular_buffer_layer = QgsVectorLayer("Polygon?crs=" + crs.authid(), "circular_buffer", "memory")
        circular_buffer_layer.dataProvider().addFeatures([circular_feature])

        # change style of the layer
        fill_symbol = QgsFillSymbol.createSimple({'color': 'cyan', 'outline_color': 'black', 'outline_width': '0.5', 'style': 'solid'})
        fill_symbol.setColor(QColor(0, 255, 255, 80))
        circular_buffer_layer.renderer().setSymbol(fill_symbol)

        # create a temporary new layer to store all the selected stops
        selected_stops_layer = QgsVectorLayer("Point?crs=" + crs.authid(), "selected_stops", "memory")

        # add fields to the layer
        fields = QgsFields()
        fields.append(QgsField("ID", QVariant.String))
        fields.append(QgsField("Stop_name", QVariant.String))

        # add fields to the layer
        selected_stops_layer.dataProvider().addAttributes(fields)

        # start editing the layer
        selected_stops_layer.startEditing()

        # iterate over the features of the original layer
        for feature in stops_layer.getFeatures():
            stop_point = feature.geometry()
            
            # check if the stop is inside the circular buffer
            if circular_buffer.contains(stop_point):
                # create a new feature
                new_feature = QgsFeature(selected_stops_layer.fields())
                new_feature.setGeometry(stop_point)
                new_feature.setAttributes([feature["ID"], feature["Stop_name"]])

                # add the feature to the layer
                selected_stops_layer.addFeature(new_feature)
        
        # commit changes
        selected_stops_layer.commitChanges()

        # load layer
        project.addMapLayer(selected_stops_layer)
        project.addMapLayer(circular_buffer_layer)

        # set layer style
        self.change_style_layer(selected_stops_layer, 'square', 'yellow', '2', None)

        # return the selected stops
        selected_stops = [feature for feature in selected_stops_layer.getFeatures()]

        print("Nearby stops obtained!")

        return selected_stops

    def get_stops_info(self, selected_stops: list):
        """Get stops info"""

        # create database object
        database = Database()

        # create a default dictionary to store the stops info
        stops_info = defaultdict(dict)

        # iterate over the selected stops
        for stop in selected_stops:
            stop_id = stop["ID"]
            stop_name = stop["Stop_name"]

            key = (stop_id, stop_name)

            # get the stop info from the database
            stop_info = database.select_information_given_stop_id(stop_id)
            for row in stop_info:
                trip_id, arrival_time, departure_time, stop_sequence, route_id, service_id, trip_headsign, route_short_name, route_long_name, route_type = row
                stop_info_query = {
                    "trip_id": trip_id,
                    "arrival_time": arrival_time,
                    "departure_time": departure_time,
                    "stop_sequence": stop_sequence,
                    "route_id": route_id,
                    "service_id": service_id,
                    "trip_headsign": trip_headsign,
                    "route_short_name": route_short_name,
                    "route_long_name": route_long_name,
                    "route_type": route_type
                }
                stops_info[key] = stop_info_query

        # return the stops info
        return stops_info

    def get_subgraphs(self, G: nx.MultiDiGraph):
        """Get subgraph of a graph"""

        print("Extracting subgraphs...")

        connected_components = list(nx.weakly_connected_components(G))
        print("Number of subgraphs: ", len(connected_components))

        project = QgsProject.instance()

        # create a layer for each subgraph
        for i, component in enumerate(connected_components):
            subG = G.subgraph(component)
            name = "subgraph_" + str(i)
            layer = QgsVectorLayer("LineString?crs=epsg:4326", name, "memory")
            layer.dataProvider().addAttributes([QgsField("Component", QVariant.Int)])
            layer.updateFields()

            # add the subgraph to the layer
            for edge in subG.edges:

                # get the nodes
                node1 = subG.nodes[edge[0]]
                node2 = subG.nodes[edge[1]]

                # create the points
                point1 = QgsPointXY(node1['x'], node1['y'])
                point2 = QgsPointXY(node2['x'], node2['y'])

                # create the feature
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromPolylineXY([point1, point2]))
                feature.setAttributes([i])
                layer.dataProvider().addFeatures([feature])

            # change style of the layer
            self.change_style_layer(layer, None, 'yellow', None, '0.5')

        
            # load layer
            project.addMapLayer(layer)
            print("Subgraph ", i, " loaded")

        print("Subgraphs extracted!")

    # def calculate_all_paths(self, G: nx.MultiDiGraph, origin: tuple, destination: tuple):
    #     """Calculate all the paths between two nodes"""

    #     print("Calculating all paths...")

    #     # get nearest nodes
    #     origin = ox.nearest_nodes(G, origin[0], origin[1])
    #     destination = ox.nearest_nodes(G, destination[0], destination[1])

    #     # calculate all the paths
    #     all_paths = list(nx.all_simple_paths(G, origin, destination))

    #     # print the number of paths
    #     print("Number of paths: ", len(all_paths))

    #     # return all the paths
    #     return all_paths

    def calculate_n_shortest_paths(self, G: nx.MultiDiGraph, origin: tuple, destination: tuple, n: int):
        """Calculate n shortest paths between two nodes"""

        print("Calculating n shortest paths...")

        # get nearest nodes
        origin = ox.nearest_nodes(G, origin[0], origin[1])
        destination = ox.nearest_nodes(G, destination[0], destination[1])

        # calculate n shortest paths
        n_shortest_paths = list(islice(ox.k_shortest_paths(G, origin, destination, k=n, weight='weight'), n))

        # calculate n shortest paths
        # n_shortest_paths = list(islice(nx.all_shortest_paths(G, origin, destination, weight='weight'), n))

        # print the number of paths
        print("Number of paths: ", len(n_shortest_paths))

        # return n shortest paths
        return n_shortest_paths


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = route_trackingDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        # Create stops layer only if not present in shapefiles folder
        if not os.path.exists(self._path + "/shapefiles/stops.shp") :
            self.create_stops_layer()
            
        # Create route shapes layer only if not present in shapefiles folder
        if not os.path.exists(self._path + "/shapefiles/shape_points.shp" or self._path + "/shapefiles/shape_lines.shp"):
            self.create_route_shapes_layer()

        if not os.path.exists(self._path + "/graphs/pedestrian_graph.gpkg"):
            self.create_pedestrian_layer()

        if not os.path.exists(self._path + "/graphs/routes_graph.gpkg"):
            self.create_graph_for_routes()
        
        # selected_stops = self.get_nearby_stops("stops", 9.1940190, 45.4571958, 500)
        # stops_info = self.get_stops_info(selected_stops)
        # print("Stops info: ")
        # pp.pprint(stops_info)

        # load the graph
        G = ox.load_graphml(self._path + "/graphs/routes_graph.graphml",
                            node_dtypes={'fid': int, 'osmid': str, 'x': float, 'y': float, 'is_stop': bool},
                            edge_dtypes={'fid': int, 'u': str, 'v': str, 'key': int, 'weight': float, 'transport': str, 'from': str, 'to': str})

        print("GraphML loaded!")

        self.get_subgraphs(G)

        orig = (9.3008493, 45.3877852)
        dest = (9.29043305, 45.3951232)

        paths = self.calculate_n_shortest_paths(G, orig, dest, 10)
        pp.pprint(paths)
        
        # See if OK was pressed
        print("DAJE ROMA DAJE")


        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
