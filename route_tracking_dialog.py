# -*- coding: utf-8 -*-
"""
/***************************************************************************
 route_trackingDialog
                                 A QGIS plugin
 Thesis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-03-14
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Gianmarco Naro
        email                : gianmarco.naro@mail.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.PyQt.QtWidgets import QFileDialog, QProgressDialog
from qgis.PyQt.QtCore import pyqtSlot, QTimer

from qgis.core import Qgis, QgsApplication

from qgis.utils import iface

from pathlib import Path
from .data_manager import *
from .inputs import Inputs

import os
import shutil
import zipfile
import sqlite3
import csv


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "route_tracking_dialog_base.ui")
)


class route_trackingDialog(QtWidgets.QDialog, FORM_CLASS, Inputs):
    def __init__(self, parent=None, route_tracking=None):
        """Constructor."""
        super(route_trackingDialog, self).__init__(parent)
        self.setupUi(self)
        self.route_tracking = route_tracking

        self.GTFSButton.clicked.connect(self.on_click_import_GTFS)
        self.closeButton.clicked.connect(self.on_click_close)
        self.forwardButton.clicked.connect(self.on_click_forward)
        self.polygonButton.clicked.connect(self.on_click_polygon)
        self.exportButton.clicked.connect(self.on_click_export_graph_folder)
        self.importButton.clicked.connect(self.on_click_import_graph_folder)
        self.deleteButton.clicked.connect(self.on_click_delete_all_data)
        self.stopsButton.clicked.connect(self.on_click_delete_stops_layer)
        self.graphsButton.clicked.connect(self.on_click_generate_graphs)
        self.deleteGraphsButton.clicked.connect(self.on_click_delete_graph_layers)

        self.result = False

    # Create a function to open the file dialog and save it in the plugin folder
    def openFileDialog(self):
        title = "Select GTFS Data"

        desktop_path = os.path.join(Path.home(), "Desktop")

        options = QFileDialog.Options()
        options |= QFileDialog.DontConfirmOverwrite
        # options |= QFileDialog.DontUseNativeDialog

        filters = "GTFS Data (*.zip)"

        # Open the dialog
        file_name, _ = QFileDialog.getSaveFileName(
            self, title, desktop_path, filters, options=options
        )

        if file_name:
            return file_name
        else:
            return

    def openFileDialogPolygon(self):
        title = "Select Region Polygons"

        desktop_path = os.path.join(Path.home(), "Desktop")

        options = QFileDialog.Options()
        options |= QFileDialog.DontConfirmOverwrite
        # options |= QFileDialog.DontUseNativeDialog

        filters = "Polygons data (*.txt)"

        # Open the dialog
        file_name, _ = QFileDialog.getSaveFileName(
            self, title, desktop_path, filters, options=options
        )

        if file_name:
            return file_name
        else:
            return

    def openExportGraphDialog(self):
        title = "Save Graphs"

        desktop_path = os.path.join(Path.home(), "Desktop")

        options = QFileDialog.Options()
        options |= QFileDialog.DontConfirmOverwrite
        # options |= QFileDialog.DontUseNativeDialog

        # Open the dialog
        folder_path, _ = QFileDialog.getSaveFileName(
            self,
            title,
            desktop_path,
            options=options,
        )

        if folder_path:
            return folder_path
        else:
            return

    def openImportGraphDialog(self):
        title = "Import Graphs"

        desktop_path = os.path.join(Path.home(), "Desktop")

        options = QFileDialog.Options()
        options |= QFileDialog.DontConfirmOverwrite
        # options |= QFileDialog.DontUseNativeDialog

        # Open the dialog
        folder_path = QFileDialog.getExistingDirectory(
            self,
            title,
            desktop_path,
            options=options,
        )

        if folder_path:
            return folder_path
        else:
            return

    @pyqtSlot()
    def on_click_import_GTFS(self):
        # if stops layer exists in the project, ask the user to delete it first
        
        if QgsProject.instance().mapLayersByName("stops"):
            # appear a pop-up that alert user to delete stops layer first
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Warning!")
            messageBox.setText(
                "<b>Stops layer already exists!</b>\nDelete stops layer first"
            )
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            messageBox.setDefaultButton(QtWidgets.QMessageBox.Ok)
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.exec_()
            return
        
        try:
            # Save the file selected by the user
            zip_file = self.openFileDialog()
            if not zip_file:
                return

            self.extract_gtfs_data(zip_file)

            # Check if the file is empty and close the dialog
            while os.stat(zip_file).st_size == 0:
                self.close()

                # Create a message box to inform the user that the file is empty
                messageBox = QtWidgets.QMessageBox(self)
                messageBox.setWindowTitle("Error!")
                messageBox.setText("<b>The file is empty!</b>\nTry with another file")
                messageBox.exec_()

                zip_file = self.openFileDialog()

            iface.messageBar().pushMessage(
                "Success!",
                "GTFS Data successfully imported!",
                level=Qgis.Success,
                duration=5,
            )

        except:
            return

    def on_click_close(self):
        self.result = False
        self.close()

    def on_click_forward(self):
        # check if the gtfs.db exists
        if not os.path.isfile(
            os.path.join(os.path.dirname(__file__), "GTFS_DB", "gtfs.db")
        ):
            # create a message box that inform the user that the gtfs.db doesn't exist
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Error!")
            messageBox.setText(
                "<b>GTFS Data not imported!</b>\nImport the GTFS Data before to continue"
            )
            messageBox.exec_()
            return
        
        if not os.path.exists(os.path.join(os.path.dirname(__file__), "graphs")):
            # create a message box that inform the user that the graphs doesn't exist
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Error!")
            messageBox.setText(
                "<b>Graphs not created or imported!</b>\nCreate or import the graphs before to continue"
            )
            messageBox.exec_()
            return
        
        if not QgsProject.instance().mapLayersByName("stops"):
            # appear a pop-up that alert user to import GTFS data first
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Warning!")
            messageBox.setText(
                "<b>Stops layer doesn't exist!</b>\nImport GTFS data first"
            )
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            messageBox.setDefaultButton(QtWidgets.QMessageBox.Ok)
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.exec_()
            return

        self.result = True
        self.close()

    def on_click_polygon(self):
        try:
            file_name = self.openFileDialogPolygon()
            if file_name is None:
                return

            # check if the folder polygons exists. If exists, delete the file polygons.txt
            polygons_folder_path = os.path.join(os.path.dirname(__file__), "polygons")
            if os.path.exists(polygons_folder_path):
                polygons_path = os.path.join(polygons_folder_path, "polygons.txt")
                if os.path.isfile(polygons_path):
                    os.remove(polygons_path)

            # now create the folder polygons if it doesn't exist
            if not os.path.exists(polygons_folder_path):
                os.makedirs(polygons_folder_path)

            polygons_path = os.path.join(polygons_folder_path, "polygons.txt")
            shutil.copyfile(file_name, polygons_path)

            print("Polygons successfully imported!")
            iface.messageBar().pushMessage(
                "Success!",
                "Polygons successfully imported!",
                level=Qgis.Success,
                duration=5,
            )
        except Exception as e:
            print(f"Error during the selection of the polygons: {e}")
            return

    def extract_gtfs_data(self, zip_file):
        try:
            print("Extraction and importation of GTFS data...")

            # remove existing db
            db_folder_path = os.path.join(os.path.dirname(__file__), "GTFS_DB")
            if os.path.exists(db_folder_path):
                db_path = os.path.join(db_folder_path, "gtfs.db")
                if os.path.isfile(db_path):
                    os.remove(db_path)

            # CSV file to extract from the ZIP file
            csv_to_extract = [
                "shapes.txt",
                "stops.txt",
                "stop_times.txt",
                "trips.txt",
                "routes.txt",
            ]

            files_number = len(csv_to_extract)

            # Initialize progress bar
            progress_dialog = QProgressDialog(self)
            progress_dialog.setWindowTitle("Importing GTFS Data")
            progress_dialog.setLabelText("Importing GTFS data...")
            progress_dialog.setCancelButton(None)
            progress_dialog.setMinimumDuration(0)
            progress_dialog.setWindowModality(2)
            progress_dialog.setMaximum(files_number)

            # temporary directory
            temp_dir = os.path.join(os.path.dirname(__file__), "temp_gtfs")
            os.makedirs(temp_dir, exist_ok=True)

            # extract the CSV files from the ZIP file to the temporary directory
            with zipfile.ZipFile(zip_file, "r") as zip_ref:
                for file_name in csv_to_extract:
                    zip_ref.extract(file_name, temp_dir)

            # create the database folder
            if not os.path.exists(db_folder_path):
                os.makedirs(db_folder_path)
            db_path = os.path.join(db_folder_path, "gtfs.db")

            # import the CSV files into the database
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()

            progress_dialog.show()

            for index, file_name in enumerate(csv_to_extract, 1):
                print(f"Importing {file_name}...")
                progress_dialog.setValue(index)
                QgsApplication.processEvents()

                with open(os.path.join(temp_dir, file_name), "r") as file_csv:
                    reader = csv.reader(file_csv)
                    header = next(reader)
                    table_name = file_name.replace(".txt", "")
                    cursor.execute(
                        f'CREATE TABLE IF NOT EXISTS {table_name} ({", ".join(header)})'
                    )
                    cursor.executemany(
                        f'INSERT INTO {table_name} VALUES ({", ".join(["?"] * len(header))})',
                        reader,
                    )

            conn.commit()
            conn.close()

            shutil.rmtree(temp_dir)

            self.route_tracking.create_stops_layer()

            print("GTFS data successfully imported!")
            iface.messageBar().pushMessage(
                "Success!",
                "GTFS Data successfully imported!",
                level=Qgis.Success,
                duration=5,
            )

            return True

        except Exception as e:
            print(f"Error during the extraction and importation of GTFS data: {e}")
            return False

    def on_click_export_graph_folder(self):
        # permit to the user to select a folder where to save the graph folder and then save the folder graphs (is in the plugin folder) in the selected folder
        try:
            folder_path = self.openExportGraphDialog()
            if folder_path is None:
                return

            # firsly check if the folder graphs exists in the plugin folder
            graphs_folder_path = os.path.join(os.path.dirname(__file__), "graphs")
            if not os.path.exists(graphs_folder_path):
                # create a message box that inform the user that the folder graphs doesn't exist
                messageBox = QtWidgets.QMessageBox(self)
                messageBox.setWindowTitle("Error!")
                messageBox.setText(
                    "<b>Graphs not exported!</b>\nCreate the graphs before export them"
                )
                messageBox.exec_()
                return

            # create the folder in the selected path
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)

            # copy what is inside the folder graphs in the selected folder
            for file_name in os.listdir(graphs_folder_path):
                shutil.copyfile(
                    os.path.join(graphs_folder_path, file_name),
                    os.path.join(folder_path, file_name),
                )

            print("Graphs successfully exported!")
            iface.messageBar().pushMessage(
                "Success!",
                "Graphs successfully exported!",
                level=Qgis.Success,
                duration=5,
            )
        except Exception as e:
            print(f"Error during the exportation of the graphs: {e}")
            return

    def on_click_import_graph_folder(self):
        """permit the user to select a folder where there is the graph folder and then copy the graph folder in the plugin folder"""
        # delete cache folder
        try:
            # remove all active layers realted to graphs
            remove_graphs_layers()
            QTimer.singleShot(1000, self.add_new_graphs_after_delay)

            # set the graphs None
            Inputs.reset_graphs(self)

        except Exception as e:
            print(f"Error during the importation of the graphs: {e}")
            return

    def add_new_graphs_after_delay(self):
        """Add new graphs after a delay"""
        folder_path = self.openImportGraphDialog()
        if folder_path is None:
            return

        # firsly check if the folder graphs exists in the plugin folder
        graphs_folder_path = os.path.join(os.path.dirname(__file__), "graphs")

        if os.path.exists(graphs_folder_path):
            shutil.rmtree(graphs_folder_path)

        shutil.copytree(folder_path, graphs_folder_path)

        self.route_tracking.create_pedestrian_layer()
        self.route_tracking.create_drive_layer()
        self.route_tracking.create_graph_for_routes()

        print("Graphs successfully imported!")
        iface.messageBar().pushMessage(
            "Success!",
            "Graphs successfully imported!",
            level=Qgis.Success,
            duration=5,
        )

    def on_click_generate_graphs(self):
        # if in the project there are graphs layers, ask the user to delete them first
        if QgsProject.instance().mapLayersByName("pedestrian_graph") or QgsProject.instance().mapLayersByName("drive_graph") or QgsProject.instance().mapLayersByName("routes_graph"):
            # appear a pop-up that alert user to delete graphs layers first
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Warning!")
            messageBox.setText(
                "<b>Graphs layers already exist!</b>\nDelete graphs layers first"
            )
            messageBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
            messageBox.setDefaultButton(QtWidgets.QMessageBox.Ok)
            messageBox.setIcon(QtWidgets.QMessageBox.Warning)
            messageBox.exec_()
            return

        # check if the polygons.txt exists
        if not os.path.isfile(
            os.path.join(os.path.dirname(__file__), "polygons", "polygons.txt")
        ):
            # create a message box that inform the user that the polygons.txt doesn't exist
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Error!")
            messageBox.setText(
                "<b>Polygons not imported!</b>\nImport the polygons before to continue"
            )
            messageBox.exec_()
            return
        
        # check if the gtfs.db exists
        if not os.path.isfile(
            os.path.join(os.path.dirname(__file__), "GTFS_DB", "gtfs.db")
        ):
            # create a message box that inform the user that the gtfs.db doesn't exist
            messageBox = QtWidgets.QMessageBox(self)
            messageBox.setWindowTitle("Error!")
            messageBox.setText(
                "<b>GTFS Data not imported!</b>\nImport the GTFS Data before to continue"
            )
            messageBox.exec_()
            return
        
        # create graphs
        self.route_tracking.create_pedestrian_layer()
        self.route_tracking.create_drive_layer()
        self.route_tracking.create_graph_for_routes()

    def on_click_delete_graph_layers(self):
        """Delete graphs layers from the project"""
        # delete cache
        # appear a pop-up that ask the user if he is sure to delete all data
        messageBox = QtWidgets.QMessageBox(self)
        messageBox.setWindowTitle("Warning!")
        messageBox.setText(
            "<b>Are you sure to delete graphs layers?</b>\nThis operation is irreversible"
        )
        messageBox.setStandardButtons(
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        messageBox.setDefaultButton(QtWidgets.QMessageBox.No)
        messageBox.setIcon(QtWidgets.QMessageBox.Warning)
        # if presse yes, delete all data
        messageBox.exec_()
        if messageBox.result() == QtWidgets.QMessageBox.Yes:
            remove_graphs_layers()
        else:
            return

    def on_click_delete_all_data(self):
        """Delete all data from graph folder, shapefiles folder, polygons folder and database"""
        # delete cache
        # appear a pop-up that ask the user if he is sure to delete all data
        messageBox = QtWidgets.QMessageBox(self)
        messageBox.setWindowTitle("Warning!")
        messageBox.setText(
            "<b>Are you sure to delete all data?</b>\nThis operation is irreversible"
        )
        messageBox.setStandardButtons(
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        messageBox.setDefaultButton(QtWidgets.QMessageBox.No)
        messageBox.setIcon(QtWidgets.QMessageBox.Warning)
        # if presse yes, delete all data
        messageBox.exec_()
        if messageBox.result() == QtWidgets.QMessageBox.Yes:
            self.delete_all_data()
        else:
            return

    def delete_all_data(self):
        print("Deleting all data...")
        remove_all_project_layers()
        QTimer.singleShot(1000, self.delete_all_data_after_delay)

    def delete_all_data_after_delay(self):
        delete_all_project_folders()

        print("All data successfully deleted!")
        iface.messageBar().pushMessage(
            "Success!",
            "All data successfully deleted!",
            level=Qgis.Success,
            duration=5,
        )

    def on_click_delete_stops_layer(self):
        """Delete stops layer from the project"""
        # delete cache
        # appear a pop-up that ask the user if he is sure to delete all data
        messageBox = QtWidgets.QMessageBox(self)
        messageBox.setWindowTitle("Warning!")
        messageBox.setText(
            "<b>Are you sure to delete stops layer?</b>\nThis operation is irreversible"
        )
        messageBox.setStandardButtons(
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        messageBox.setDefaultButton(QtWidgets.QMessageBox.No)
        messageBox.setIcon(QtWidgets.QMessageBox.Warning)
        # if presse yes, delete all data
        messageBox.exec_()
        if messageBox.result() == QtWidgets.QMessageBox.Yes:
            self.delete_stops_layer()
        else:
            return

    def delete_stops_layer(self):
        """Remove stops layer from the project"""
        remove_stops_layer()
        QTimer.singleShot(1000, self.delete_stops_layer_after_delay)

    def delete_stops_layer_after_delay(self):
        print("Stops layer successfully deleted!")
        delete_shapefiles_folder()
        iface.messageBar().pushMessage(
            "Success!",
            "Stops layer successfully deleted!",
            level=Qgis.Success,
            duration=5,
        )

    def get_result(self):
        return self.result

    def set_result(self, result):
        self.result = result
